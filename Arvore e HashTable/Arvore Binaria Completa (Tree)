#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

typedef struct binaryTree{
  int item;
  struct binaryTree *left;
  struct binaryTree *right;
} binaryTree;

binaryTree *createBinaryTree(int item, binaryTree *left,binaryTree *right){
  binaryTree *newTree=(binaryTree*)malloc(sizeof(binaryTree));
  newTree->item=item;
  newTree->left=left;
  newTree->right=right;
  return newTree;
}

void printa(){
  printf("nao completa\nnos com um filho:");
}

int checkTree(binaryTree *root, int *contNosPtr,int *i){
    (*contNosPtr)++;
    if(root==NULL) return 1;
    if(root->left==NULL && root->right==NULL) return 1;

    if(root->left==NULL || root->right==NULL){
      if((*i)<1) printa();
      (*i)++;
      printf(" %d", root->item);
    }

    return checkTree(root->left, contNosPtr,i) && checkTree(root->right, contNosPtr,i);
}

binaryTree *createTree(){
  char caract;
  int item;
  scanf("%d",&item);

  binaryTree *newNode=createBinaryTree(item, NULL, NULL);
  scanf(" %c",&caract);

  if(caract==')') return NULL;

  if(caract=='('){
    newNode->left=createTree();
  }
  scanf( "%c",&caract);
  if(caract=='('){
    newNode->right=createTree();
  }
  scanf(" %c",&caract);
  return newNode;
}

int main(){
  int contNos=0,i=0;
  char c;
  scanf(" %c",&c);
  binaryTree *root=createTree();
  if(checkTree(root,&contNos,&i) && i<1) printf("completa\ntotal de nos: %d",contNos);
  return 0;
}
